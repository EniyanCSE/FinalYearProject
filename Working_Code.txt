This is the working code for image transfer from ESP32 to Ras and get the results from gemini. (Basic working code)
Working Code 

#include <WiFi.h>
#include <esp_camera.h>
#include <WebServer.h>
#include <DustbinFinalDataModel_inferencing.h>

// Wi-Fi credentials
const char* ssid = "";  // Replace with your Wi-Fi SSID
const char* password = "";  // Replace with your Wi-Fi password

// Select camera model
#define CAMERA_MODEL_AI_THINKER

#if defined(CAMERA_MODEL_AI_THINKER)
#define PWDN_GPIO_NUM    32
#define RESET_GPIO_NUM   -1
#define XCLK_GPIO_NUM    0
#define SIOD_GPIO_NUM    26
#define SIOC_GPIO_NUM    27
#define Y9_GPIO_NUM      35
#define Y8_GPIO_NUM      34
#define Y7_GPIO_NUM      39
#define Y6_GPIO_NUM      36
#define Y5_GPIO_NUM      21
#define Y4_GPIO_NUM      19
#define Y3_GPIO_NUM      18
#define Y2_GPIO_NUM      5
#define VSYNC_GPIO_NUM   25
#define HREF_GPIO_NUM    23
#define PCLK_GPIO_NUM    22
#else
#error "Camera model not selected"
#endif

WebServer server(80); // Start a web server on port 80
camera_fb_t* fb;      // Frame buffer for the camera

unsigned long lastCaptureTime = 0; // To track the last capture time
const unsigned long captureInterval = 5000; // 5 seconds
bool serverActive = true; // To track server status

// Function to initialize Wi-Fi connection
void connectToWiFi() {
    Serial.println("Connecting to Wi-Fi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting...");
    }
    Serial.println("Connected to Wi-Fi");
    Serial.print("Server ready! Use this URL to see the uploaded image: ");
    Serial.print("http://");
    Serial.println(WiFi.localIP());
}

// Function to run inference on the image and display predictions
void runInference() {
    ei_impulse_result_t result = { 0 };
    ei::signal_t signal;
    signal.total_length = EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT;
    signal.get_data = &ei_camera_get_data;

    EI_IMPULSE_ERROR err = run_classifier(&signal, &result, false);
    if (err != EI_IMPULSE_OK) {
        Serial.printf("Failed to run classifier (%d)\n", err);
        return;
    }

    // Print predictions
    Serial.println("Predictions:");
    for (int i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        Serial.printf("%s: %.5f\n", ei_classifier_inferencing_categories[i], result.classification[i].value);
    }
}

// Function to handle image capture and serve as HTTP response
void handleCaptureAndUpload() {
    fb = esp_camera_fb_get();
    if (!fb) {
        Serial.println("Camera capture failed");
        server.send(500, "text/plain", "Camera capture failed");
        return;
    }

    // Send image as response to the request
    server.sendHeader("Content-Type", "image/jpeg");
    server.send_P(200, "image/jpeg", (const char *)fb->buf, fb->len);

    // Return the frame buffer back to the driver for reuse
    esp_camera_fb_return(fb);

    // Print message
    Serial.println("Image uploaded.");
}

// Function to setup camera
bool setupCamera() {
    camera_config_t config;
    config.ledc_channel = LEDC_CHANNEL_0;
    config.ledc_timer = LEDC_TIMER_0;
    config.pin_d0 = Y2_GPIO_NUM;
    config.pin_d1 = Y3_GPIO_NUM;
    config.pin_d2 = Y4_GPIO_NUM;
    config.pin_d3 = Y5_GPIO_NUM;
    config.pin_d4 = Y6_GPIO_NUM;
    config.pin_d5 = Y7_GPIO_NUM;
    config.pin_d6 = Y8_GPIO_NUM;
    config.pin_d7 = Y9_GPIO_NUM;
    config.pin_xclk = XCLK_GPIO_NUM;
    config.pin_pclk = PCLK_GPIO_NUM;
    config.pin_vsync = VSYNC_GPIO_NUM;
    config.pin_href = HREF_GPIO_NUM;
    config.pin_sscb_sda = SIOD_GPIO_NUM;
    config.pin_sscb_scl = SIOC_GPIO_NUM;
    config.pin_pwdn = PWDN_GPIO_NUM;
    config.pin_reset = RESET_GPIO_NUM;
    config.xclk_freq_hz = 20000000;
    config.pixel_format = PIXFORMAT_JPEG;
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;

    esp_err_t err = esp_camera_init(&config);
    if (err != ESP_OK) {
        Serial.printf("Camera init failed with error 0x%x", err);
        return false;
    }
    return true;
}

// Function to convert camera frame buffer to a signal
int ei_camera_get_data(size_t offset, size_t length, float *out_ptr) {
    size_t pixel_ix = offset * 3;
    size_t pixels_left = length;
    size_t out_ptr_ix = 0;

    while (pixels_left != 0) {
        // Swap BGR to RGB here
        out_ptr[out_ptr_ix] = (fb->buf[pixel_ix + 2] << 16) + (fb->buf[pixel_ix + 1] << 8) + fb->buf[pixel_ix];
        out_ptr_ix++;
        pixel_ix += 3;
        pixels_left--;
    }
    return 0;
}

void setup() {
    Serial.begin(115200);

    connectToWiFi(); // Connect to Wi-Fi
    if (!setupCamera()) { // Initialize camera
        Serial.println("Camera setup failed");
        return;
    }

    // First, capture the image for inference
    fb = esp_camera_fb_get();
    if (fb) {
        runInference();   // Run inference on the captured image
        esp_camera_fb_return(fb);  // Clear buffer
    }

    // Set up the image capture route
    server.on("/upload", HTTP_GET, handleCaptureAndUpload);
    server.begin(); // Start the server
    serverActive = true; // Ensure server is marked active at the start
    lastCaptureTime = millis(); // Start the countdown timer when the server starts
    Serial.println("Server started");
}

void loop() {
    // Only handle client requests if the server is active
    if (serverActive) {
        server.handleClient();
        
        // Check if 5 seconds have passed since the server started
        if (millis() - lastCaptureTime >= captureInterval) {
            server.stop(); // Stop the server
            serverActive = false; // Mark the server as inactive
            Serial.println("Server stopped after 5 seconds.");
        }
    }
    
}


For RasperryPi
import os
import time
import requests
from datetime import datetime
import io
from PIL import Image

# Gemini API setup (replace with your actual API key)
import google.generativeai as genai
genai.configure(api_key="AIzaSyAFY_BA35k_Br_Jl1oj6V0v4ce9dawWnpo")
gemini_model = genai.GenerativeModel('gemini-1.5-flash')

# URL to fetch the image from
url = 'http://172.20.10.2/upload'

# Folder to save the images
save_folder = 'images'

# Ensure the folder exists
if not os.path.exists(save_folder):
    os.makedirs(save_folder)

def save_image_from_url(url):
    try:
        # Get the image data from the URL with a timeout of 5 seconds
        response = requests.get(url, timeout=5)
        
        # Check if the response is valid (status code 200)
        if response.status_code == 200:
            # Start the timer
            start_time = time.time()  # Start the timer here
            
            # Create a unique filename with timestamp
            filename = datetime.now().strftime('%Y-%m-%d_%H-%M-%S') + '.jpg'
            file_path = os.path.join(save_folder, filename)
            
            # Save the image to the folder
            with open(file_path, 'wb') as f:
                f.write(response.content)
            print(f"Image saved as {filename}")
            return file_path, start_time  # Return the file path to the saved image and start time
        else:
            print(f"Failed to get image, status code: {response.status_code}")
    except requests.exceptions.Timeout:
        print("Request timed out. Retrying...")
    except requests.exceptions.ConnectionError:
        print("Connection error. Retrying...")
    except Exception as e:
        print(f"An error occurred: {e}")
    
    return None, None  # Indicate failure to save the image

def classify_with_gemini(image_path):
    try:
        # Open and load the image
        with open(image_path, 'rb') as image_file:
            img_byte_arr = io.BytesIO(image_file.read())

        # Prepare the image for API
        img_byte_arr.seek(0)
        image_parts = [{"mime_type": "image/jpeg", "data": img_byte_arr.getvalue()}]

        # Prompt for the Gemini API
        prompt = """
        You are an expert in identifying types of trash. 
        You will receive an image as input, and your task is to classify it into one of the following categories: 
        food, plastic, glass, metal, paper, organic, medical, nuclear waste. If it's not trash, return 'Not Trash'.
        """
        
        # Send the image and prompt to the Gemini API for classification
        response = gemini_model.generate_content([image_parts[0], prompt])

        # Print the response from Gemini
        return response.text
    except Exception as e:
        print(f"An error occurred while sending the image to Gemini: {e}")
        return None

# Loop to fetch images until one is saved successfully
while True:
    image_path, start_time = save_image_from_url(url)  # Capture both image path and start time
    if image_path:
        # Once an image is saved, send it to the Gemini API for classification
        gemini_result = classify_with_gemini(image_path)
        if gemini_result:
            print(f"Gemini API classified the image as: {gemini_result}")
            
            # End the timer and calculate the total time taken
            end_time = time.time()  # End the timer here
            total_time = end_time - start_time  # Calculate the total time taken
            print(f"Total time taken to classify the image: {total_time:.2f} seconds")
        
        break  # Exit the loop once the image is saved and sent to the API
    
    # Wait for 1 second before trying again
    time.sleep(1)
